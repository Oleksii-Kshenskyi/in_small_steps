The File:
MVC Calculator REQUIREMENTS file, version 1.0.0.0 <== This version always shows the intended version that CALC application is going to get AFTER all current requirements are fulfilled.

The System:
The system is a basic calculator. It should be able to perform four basic arithmetic operations with integers and floats, 
should be working fine <i.e. without major bugs> and should be based on MVC and SOLID where possible/applicable.

The Disclaimer:
The system is specifically being designed for the purposes of self-education. Therefore all the complaints about its non-working functionality shall be disregarded.
However, the system is intended to be developed in "working iterations". This means that hopefully each time the application is committed at least its basic functionality should be working.

Critical Operations:
Critical operations are hereafter understood as ALL the operations that are critical to the end user / all the operations the end user should be able to perform via the system.

Requirement Name:
Requirement's name consists of:
---
"??: " - written before the requirement's name, this describes requirement's current status:
NS - implementation not started;
PR - partial implementation (some features are missing);
BG - implementation currently bugged;
CM - implementation completed successfully.
---
?? - first two symbols describe the system this requirement is created for. <CL is the core application, Calculator>
??? - next three symbols are the name of functionality this requirement is created for. <BAO is Basic Arithmetic Operations>
???? - the last four digits are the requirement's number within the eariler specified system and functionality.
A requirement's name shall be stated in every commit implementing that requirement.

Notation:
[] - used to express an abbreviation that is to be used in the requirements text after those brackets.
<> - examples are stated in angle brackets.
--> - reference to some other requirement.
x => y - y happens AFTER an event from x has happened; x and y are requirement names OR events described by words.
=?= - enclosed by this special sequence is a condition. Requirement is valid only if this condition is fulfilled.
=?= --> REQUIREMENT =?= - same conditions as in the referenced requirement should be fulfilled for this requirement to be valid.
!x! - WARNING! Requirement is NOT VALID until x is performed! x can be either requirement's name or a condition described in words.

BASIC REQUIREMENTS:

Graphical User Interface:
NS: CL-GUI-0001 - The system shall have 10 numeric buttons.
NS: CL-GUI-0002 - The system shall have a "dot" button.
NS: CL-GUI-0003 - The system shall have a numeric display field [DSP hereafter].
NS: CL-GUI-0004 - The system shall have a C button.
NS: CL-GUI-0005 - The system shall have a CA (Clear All) button.
NS: CL-GUI-0006 - The system shall have an = (Equals sign) button..
NS: CL-GUI-0007 - The system shall have four arithmetic operations buttons (+, -, *, /).
NS: CL-GUI-0008 - The system shall have an OFF button colored ORANGE.

GUI Behaviour:
NS: CL-UIB-0001 - The DSP shall be responsible for the output of a current operand.
NS: CL-UIB-0002 - Numeric buttons shall append DSP with their corresponding numbers.
NS: CL-UIB-0003 - C button shall cancel the current operand on DSP and change it to ZERO.
NS: CL-UIB-0004 - CA button shall cancel ALL the operands and operations turning everything to ZERO/UNINITIALIZED.
NS: CL-UIB-0005 - Arithmetic operations buttons (+,-,*,/) should be pressed between entering operand 1 and operand 2. They shall set the arithmetic operation to be performed between those two operands.
NS: CL-UIB-0006 - The OFF button shall make the system terminate.
NS: CL-UIB-0007 - =?= The result has been calculated and shown on DSP =?= 
                  =?= Arithmetic operation button pressed =?=
                  The result shall become first operand (operation and operand 2 shall be canceled).
NS: CL-UIB-0008 - =?= The result has been calculated and shown on DSP =?= 
                  =?= Numeric button pressed =?=
                  DSP contents shall be substituted with this numeric button. Input of new operand 1 started. ALL operands/operations turned to ZERO/UNINITIALIZED.

Equals Sign Behaviour:
NS: CL-ESB-0001 - =?= ALL THREE parts of the operation have been set (operand 1, operation, operand 2) =?= Equals sign button shall display the result of the operation on the DSP.
NS: CL-ESB-0002 - =?= Operand 2 hasn't been set =?= Equals sign button does nothing.

Floating Point Operations:
The "dot" button's behaviour is described here.
NS: CL-FPO-0001 - The "dot" button shall be responsible for all the floating point operations. Dot button shall have a set of rules to describe its behaviour.
NS: CL-FPO-0002 - The "dot" button shall put a "." symbol to DSP according to conditions stated in requirements of FPO section following this one.
NS: CL-FPO-0003 - =?= No "." symbol on DSP yet, value's not ZERO =?= The "dot" button puts one "." on DSP.
NS: CL-FPO-0004 - =?= No "." symbol on DSP yet, value's ZERO =?= The "dot" button makes current DSP value "0.", NOT ".", so resulting number is <0.35>, NOT <.35>.
NS: CL-FPO-0005 - =?= "." symbol is already on DSP =?= The "dot" button doesn't do anything. No number with two or more "." symbols should be possible to display on DSP.
NS: CL-FPO-0006 - All the floating point behaviour should be RESET after a user presses any of the cancel buttons <C, CA>.
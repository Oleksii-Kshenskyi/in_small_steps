# in_small_steps
Teaching myself programming in small steps. Each folder should be a FINISHED small project.

WHAT IS THIS?
This is a collection of small applications (usually written with C++/Qt/QML, but not always).
Each folder in the root directory should contain a small and FUNCTIONING project.
Those projects don't always contain something practically applicable in the real world, but that's not their purpose.
The real purpose here is to study some aspects of C++ or programming in general.
If the app in some folder doesn't work, it means it's not finished yet.
All the future apps in this project should be described here in this file.

1 - Calculator (MVC model)
A calculator based on Model-View-Controller pattern. 
The goal here is not to create a calculator per se, but to undestand the basics of MVC and SOLID.
Calculator should contain a "Number" field, number buttons, a comma, equal sign, reset buttons, and the basic arithmetic operations (+,-,*,/).
Nothing fancy is expected here. Do this in MVC, get SOLID where you can, and you're good to go.
When the change to calculator is done, increment the 3rd number. When some part is done, increment 2nd number. When the whole project is done,
increment 1st number.
NOTE TO SELF [TO REMOVE AFTER RESOLVED]: 
1. Needs investigation as to how to refactor it the best way. 
   - Current idea is to NOT have ANY more logic in QML other than COMPLETELY necessary. The idea is to rebuild QML connection system the following 
     way: QML has a signal "button pressed" to which a model responds by setting its value and a view does any logic if necessary, and then the 
     view invokes "set text" for the main display.
   - This means that you have to also think about WHERE to organize QML connections stuff (best option is View). Currently both View and ViewModel
     are declared as context properties. No good.
   - CLQMLConnector has the unused method, setQMLMainText(). This method should change QML text directly. Thing is, QML doesn't want to refresh
     GUI if called from C++. Think what can be done about it.
   - Think about the way to remove 10 repeated blocks for buttons in QML. Maybe use the Repeater QML type somehow?

2 - Effective Modern Cpp
This is a project created for the purpose of learning stuff from said book. Try to create a small program for each item to use it the way the book
wants you to, and to train the principle through practice.
Each item contains its own folder with a small project inside. When the project is updated, increment 3rd number. When the item is done, increment 
2nd number. When the whole book is done, increment 1st number.

CURRENT LEARNING PLAN:
- Try to commit every day [doesn't matter how small the commit is]
- First, finish the MVC Calculator app; <== I'm here currently
- Second, create one app in several languages: C++, C#, Java, Python, Ruby. Actual purpose and contents of the app TBD.
  IMPORTANT NOTE: the app should have one different module in each language.
- Third, create a small game (most probably an Arkanoid clone or a fifteen game) in C#/Unity.
- Then, try to do the same with some other language/framework/whatever (Unreal Engine 4?).
- Start a big project (most probably either a roguelite or the file manager).

SEPARATE PLAN:
- Until new job is found, studying for 6h every day. Currently it involves learning the Effective Modern C++ book.

by Oleksii <DarkSpectre> Kshenskyi.
